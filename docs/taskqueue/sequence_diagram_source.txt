
title THOR Taskqueue Logical Flow

participant "Client" as C
participant "Cloud Storage" as S
participant "RabbitMQ" as Q
participant "Worker" as W1

group #lightgreen Create Job
C->S:Upload Observations
activate S
note over S:--/thor_jobs/v1/jobs-<job-id>/observations.csv--

deactivate S

C -> S: Upload Configuration
activate S
note over S:--/thor_jobs/v1/jobs-<job-id>/config.csv--

deactivate S


group #lightblue Request Task 1
C -> S:Upload Task 1 inputs
activate S
note over S:--/thor/tasks/v1/jobs/<job-id>/tasks/<task_1_id>/inputs/orbits.csv--
deactivate S

C -> Q: Enqueue Task 1
activate Q
box over Q:JSON Message:\n--""job_id=<job_id>\nbucket=<cloud_storage_bucket_name>\ntask_id=<task_1_id>""--
deactivate Q
end

==Repeat, making another Task for each Orbit==

group #lightblue Request Task N
C -> S: Upload Task N Inputs
activate S
note over S:--/thor/tasks/v1/jobs/<job-id>/tasks/<task_N_id>/inputs/orbits.csv--
deactivate S

C -> Q: Enqueue Task N
activate Q
box over Q:JSON Message:\n--""job_id=<job_id>\nbucket=<cloud_storage_bucket_name>\ntask_id=<task_N_id>""--
deactivate Q
end

C -> S: Upload Job Manifest
activate S
box over S:--/thor_jobs/v1/jobs-<job-id>/manifest.json\n\njob_id=<job_id>\ntask_ids=[<task_1_id>, <task_2_id>, ... <task_N_id>]\norbit_ids=[<task_1_orbit_id>, ... <task_n_orbit_id>]
--
deactivate S
end

W1 -> Q: Check for tasks
activate Q

group #lightblue Handle Task 1
group #yellow Download inputs
Q -> W1: Received Task 1
activate W1

W1 -> S: Download Job Observations
activate S
S -> W1:
deactivate S

W1 -> S: Download Job Configuration
activate S
S -> W1:
deactivate S

W1 -> S: Download Task Orbits
activate S
S -> W1:
deactivate S

W1 -> S: Upload Status
activate S
box over S: ""--/thor_tasks/jobs/<job_id>/tasks/<task_1_id>/status\n\n\nworker=worker1.hostname.thor.dev\nstatus="in_progress"--""
deactivate S
end

group #orange Run THOR
activate W1
W1->W1: range and shift
W1->W1: cluster and link
W1->W1: IOD
W1->W1: OD
W1->W1: merge and extend
deactivate W1
end

group #yellow Upload outputs
W1->S: Upload THOR ""out_dir"" contents
activate S
box over S: --""/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/thor.log\n/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/clusterandlink.csv\n...\n/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/recovered_orbits.csv
deactivate S

W1->S: Mark status as succeeded
activate S
box over S: ""--/thor_tasks/jobs/<job_id>/tasks/<task_1_id>/status\n\n\nworker=worker1.hostname.thor.dev\nstatus="succeeded"--""
deactivate S

W1->Q: ACK message

deactivate Q
end
end

deactivate W1

==Repeat, running each task==

W1->Q: Check for task
activate Q
group #lightblue Handle Task N
Q->W1: Receive Task N
W1->S: Download inputs
W1->W1: Run THOR
W1->S: Upload outputs
W1->Q: ACK task
deactivate Q
end

loop #lightgreen for each task
C->S: download status
activate S
box over S:--/thor_jobs/v1/jobs-<job-id>/tasks/<task_id>/status.json""\n\nstate=[requested | in_progress | succeeded | failed]\nworker=<worker-hostname>
S->C:
deactivate S
activate C
note over C:--Check if task is completed \n(succeeded or failed). When \nall tasks are complete, end \nthe loop--
deactivate C
end
loop #lightgreen for each task
C->S: Download results
activate S
box over S:--""/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/thor.log\n/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/clusterandlink.csv\n...\n/thor_jobs/v1/jobs-<job_id>/tasks/<task_id>/outputs/recovered_orbits.csv
S->C:
deactivate S
box over C:--""output/tasks/<task_id>/outputs/thor.log\noutput/tasks/<task_id>/outputs/clusterandlink.csv\n...\noutput/tasks/<task_id>/outputs/recovered_orbits.csv
end
