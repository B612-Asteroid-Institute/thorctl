name: Deploy thorctl
description: Deploy a new version of thorctl

inputs:
  environment:
    description: Environment to deploy to
    required: true

  token:
    description: Github token
    required: true

  gcp_project_id:
    description: GCP project ID
    default: moeyens-thor-dev

  gcp_service_account_key:
    description: GCP Service Account Key secret
    required: true

runs:
  using: composite
  steps:
    - uses: chrnorm/deployment-action@releases/v1
      name: Create GitHub deployment
      id: deployment
      with:
        token: ${{ inputs.token }}
        environment: ${{ inputs.environment }}

    - name: Mark deployment in progress
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ inputs.token }}
        state: in_progress
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Set up cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ inputs.gcp_project_id }}
        service_account_key: ${{ inputs.gcp_service_account_key }}
        export_default_credentials: true

    - name: Log in to docker
      run: gcloud auth configure-docker

    - name: Build thorctl docker image if it doesn't exist
      run: |
        docker pull gcr.io/moeyens-thor-dev/thorctl:${{ github.sha }} || true

        if docker images gcr.io/moeyens-thor-dev/thorctl:${{ github.sha }} | grep -q "${{ github.sha }}"; then
            echo "Docker pull succeeded"
        else
            echo "Building docker image"
            docker build -t gcr.io/moeyens-thor-dev/thorctl:${{ github.sha }} .
        fi

    - name: Tag and push image
      run: |
        docker tag gcr.io/moeyens-thor-dev/thorctl:${{ github.sha }} gcr.io/moeyens-thor-dev/thorctl:${{ inputs.environment }}-tasks-latest
        docker push gcr.io/moeyens-thor-dev/thorctl:${{ inputs.environment }}-tasks-latest

    - name: Update autoscaler
      run: infra/autoscaler/update.sh ${{ inputs.environment }}

    - name: Mark deployment a success
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ inputs.token }}"
        state: success
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Mark deployment a failure
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ inputs.token }}"
        state: success
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Mark deployment cancelled
      if: cancelled()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ inputs.token }}"
        state: error
        description: "deployment was cancelled"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
